name: Build and Package Flow Edge Images

on: workflow_dispatch

jobs:
  build_rust:
    runs-on: ubuntu-latest
    container:
      image: thisseanzhang/landscape:build_base
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64
    env:
      TARGET_ARCH: ${{ matrix.target }}
      TMP_DIR: tmp/${{ matrix.arch }}/redirect_prog
      BUILD_DIR: dockerfiles/redirect_prog
      APPS_DIR: tmp/${{ matrix.arch }}/redirect_prog/apps

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Rust Release Build
        run: |
          echo "Building for $TARGET_ARCH..."
          cargo build --release \
            --package landscape-ebpf \
            --bin redirect_demo_server \
            --bin redirect_pkg_handler \
            --target $TARGET_ARCH

      - name: Prepare Build Artifacts and Copy Dockerfile
        run: |
          echo "Prepare $TMP_DIR..."

          # 清理目录
          rm -rf $TMP_DIR
          mkdir -p $APPS_DIR/server

          # 复制产物
          cp target/$TARGET_ARCH/release/redirect_demo_server $APPS_DIR/server/redirect_demo_server
          echo '#!/bin/bash' > $APPS_DIR/server/run.sh
          echo '/app/server/redirect_demo_server' >> $APPS_DIR/server/run.sh
          chmod +x $APPS_DIR/server/run.sh

          cp target/$TARGET_ARCH/release/redirect_pkg_handler $APPS_DIR/redirect_pkg_handler
          chmod +x $APPS_DIR/redirect_pkg_handler

          cp $BUILD_DIR/start.sh $APPS_DIR/start.sh
          chmod +x $APPS_DIR/start.sh

          # 复制 dockerfiles/redirect_prog 目录（包括 Dockerfile)
          cp -r $BUILD_DIR/* $TMP_DIR/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.arch }}
          path: ${{ env.TMP_DIR }}

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: build_rust
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            target: x86_64-unknown-linux-gnu
          - arch: arm64
            platform: linux/arm64
            target: aarch64-unknown-linux-gnu

    env:
      DOCKER_ARCH: ${{ matrix.arch }}
      DOCKER_PLATFORM: ${{ matrix.platform }}
      TARGET_ARCH: ${{ matrix.target }}
      TMP_DIR: tmp/${{ matrix.arch }}/redirect_prog

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.arch }}
          path: ${{ env.TMP_DIR }}

      - name: Check artifact download result
        run: |
          echo "=== TMP_DIR Tree ==="
          find $TMP_DIR
          echo "=== Dockerfile Content ==="
          cat $TMP_DIR/Dockerfile
          echo "=== apps/server Content ==="
          ls -l $TMP_DIR/apps/server || echo "apps/server not found!"

      - name: Setup QEMU for Cross-Build
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/${OWNER_LOWER}/landscape-edge"
          
          TAG=${DOCKER_ARCH}-${{ github.run_number }}

          docker buildx build \
            --platform $DOCKER_PLATFORM \
            -t $IMAGE_NAME:$TAG \
            --push \
            -f $TMP_DIR/Dockerfile \
            $TMP_DIR
